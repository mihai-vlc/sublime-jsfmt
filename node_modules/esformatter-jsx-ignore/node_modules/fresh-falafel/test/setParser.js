var falafel = require('../');
var test = require('tape');

test('for setParser', function (t) {
    t.plan(2);
    
    var src = 'var React = require(\'react\');\nvar Hello = React.createClass({\n  render: function() {\n    var dataProps = {\n      \'data-prop1\': 2,\n      \'data-prop2\': \'some prop\'\n    };\n    return <div {...dataProps}>Hello {this.props.name}</div>;\n  }\n});\n\nReact.render(<Hello name="World" />, document.body);';
    var expected = 'var React = require(\'react\');\nvar Hello = React.createClass({\n  render: function() {\n    var dataProps = {\n      \'data-prop1\': 2,\n      \'data-prop2\': \'some prop\'\n    };\n    return void(0/*$$$_XJS_ELEMENT_$$$*/);\n  }\n});\n\nReact.render(void(1/*$$$_XJS_ELEMENT_$$$*/), document.body);';
    var sections = [];

    falafel.setParser(require('esprima-fb').parse);

    var output = falafel(src, function (node) {
      if (node.type === 'XJSElement' && node.parent.type !== 'XJSElement') {
        sections.push(node.source());
        node.update('void(' + (sections.length -1) + '/*$$$_XJS_ELEMENT_$$$*/)');
      }
    });

    var inverse = falafel(output.toString(), function (node) {
      //console.log(node.type, node.source());
      if (node.type === 'UnaryExpression' && node.operator === 'void' && node.source().match(/void\((\d+)\/\*\$\$\$_XJS_ELEMENT_\$\$\$\*\/\)/g)) {
        var nodeIdx = parseInt(node.argument.source(), 10);
        node.update(sections[nodeIdx]);
      }
    });

    t.equal(output.toString(), expected);
    t.equal(inverse.toString(), src);
});
